# MissionOrder.action Interface
# essentially what Mangiafuoco requests from a single puppet under Savoiardo's suggestion
# and what is returned by the puppets

##### GOAL #####
# here are the requests from Mangiafuoco to the puppets
# the interface is designed to handle every task type generically
# so certain fields may be under-utilized or not used at all depending on the task
# whoever implements the tasks by reading the task type must know what to read

int32 task_id # task id according to the judges

string task_type # "find_object", "find_target", "ptz_collab"(?), "follow_sequence", "emergency_rtb", "emergency_landing"

int32[] target_ids # for numeric targets and target sequences like in "find_target" and "follow_sequence"

geometry_msgs/Pose poses # for tasks where Savoiardo already knows the pose where to go to perform the task, info that the puppet can use

string object_name # for targets that have a label like in the "find_object" task

geometry_msgs/Point[] zone # list of vertices (in meters) that represent the zone to search in (it's the puppet's choice whether to use it or not)

---
##### RESULT #####
string success_message

sensor_msgs/CompressedImage[] photo_list # list of images (more than one only for find the target)

int32 sequence_index # incremental index for follow the marker

string completion_time # example string 2025-09-16 15:25:30 (this must be filled by the task like aruco photo because the timestamp must be the same as opencv's)

---
##### FEEDBACK #####
string progress_message # string for flexibility, could still maintain a progressive numerical percentage or a label, we choose in the nodes and not here so we don't have to rebuild

string success_message

sensor_msgs/CompressedImage[] photo_list # list of images (more than one only for find the target)

int32 sequence_index # incremental index for follow the marker

string completion_time # example string 2025-09-16 15:25:30 (this must be filled by the task like aruco photo because the timestamp must be the same as opencv's)
